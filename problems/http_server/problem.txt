En este desafio , escribe un server http que use un stream through para canalizar el request 
hacia el objeto response , volviendo todo el request a mayusculas. 

Los Streams no solo son para archivos de textos y stdin/stdout. Sabias que los objetos http request 
y http response del manejador `http.createServer()` del nucleo de node son tambien streams.

Por ejemplo, podemos canalizar un archivo al objeto response.

    var http = require('http');
    var fs = require('fs');
    var server = http.createServer(function (req, res) {
        fs.createReadStream('file.txt').pipe(res);
    });
    server.listen(process.argv[2]);

Esto es genial, porque nuestro server puede responder inmediatamente sin tener que dejar
todo en un bufer primeramente. 

Tambien podriamos popular un archivo con los datos del request  


    var http = require('http');
    var fs = require('fs');
    var server = http.createServer(function (req, res) {
        if (req.method === 'POST') {
            req.pipe(fs.createWriteStream('post.txt'));
        }
        res.end('beep boop\n');
    });
    server.listen(process.argv[2]);

Puedes probar este Post Server con el comando curl: 

    $ node server.js 8000 &
    $ echo hack the planet | curl -d@- http://localhost:8000
    beep boop
    $ cat post.txt
    hack the planet

Tu server http deberia escuchar el puerte dado por parametro a process.argv[2]
para luego convertir el POST request, todo a mayusculas, usando la misma idea que el ejemplo de TRANSFORM.

Para refrescar la memoria, aqui hay ejemplo con los callbacks defaults de through:

    var through = require('through')
    process.stdin.pipe(through(write, end)).pipe(process.stdout);
    
    function write (buf) { this.queue(buf) }
    function end () { this.queue(null)

Usa eso, pero envia los datos en mayuscula en tu http response.

Para asegurarnos, usa el comando `npm install through` en el directorio donde tu solucion esta creada.
