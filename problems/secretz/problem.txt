Se proveerá un archivo comprimido y encriptado mediante un pipe en process.stdin, para resolver este 
desafío deberás, por cada elemento dentro del archivo, imprimir un hash md5 hexadecimal de
su contenido, seguido de un espacio y su nombre, y luego un salto de linea.

Recibirás el tipo de cifrado mediante provess.argv[2] y su contraseña mediante process.argv[3].
Puedes pasar estos parámetros directamente a `crypto.createDecipher()`.

La librería zlib que obtienes mediante `require('zlib')` contiene el método
`zlib.createGunzip()` que devuelve un stream para descomprimir.

El modulo `tar` de npm contiene el método `tar.Parse()` que emite un evento `'entry'`
por cada elemento dentro del archivo. Cada objeto `entry` es un stream de lectura
del contenido de los archivos, ademas:

`entry.type` contiene el tipo de archivo (si es 'Archivo', 'Carpeta', etc)
`entry.path` contiene la ruta al archivo dentro de su contenedor

Ejemplo de uso del modulo 'tar':

    var tar = require('tar');
    var parser = tar.Parse();
    parser.on('entry', function (e) {
        console.dir(e);
    });
    var fs = require('fs');
    fs.createReadStream('file.tar').pipe(parser);

Utiliza `crypto.createHash('md5', { encoding: 'hex' }) para generar un stream que
imprima un hash md5 hexadecimal del contenido que le proporciones.

Asegurate de ejecutar el comando `npm install tar through` en el directorio donde se encuentra tu archivo de solución.