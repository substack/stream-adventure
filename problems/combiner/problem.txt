Escribe un modulo que devuelva un stream de lectura/escritura utilizado
el modulo `stream-combiner`. Puedes utilizar este código como ejemplo inicial:

    var combine = require('stream-combiner')
    
    module.exports = function () {
        return combine(
            // lee cada linea del json,
            // agrupa los libros por genero,
            // luego comprime el resultado
        )
    }
 
Tu stream de entrada recibirá una lista JSON separada por saltos de linea con géneros 
de ciencia ficción y libros. Todos los libros (`"type":"book"`) que continúen luego de 
un nuevo genero (`"type":"genre"`) pertenecen a el hasta que se suministre uno nuevo:

    {"type":"genre","name":"cyberpunk"}
    {"type":"book","name":"Neuromancer"}
    {"type":"book","name":"Snow Crash"}
    {"type":"genre","name":"space opera"}
    {"type":"book","name":"A Deepness in the Sky"}
    {"type":"book","name":"Void"}
    
Tu programa debe generar una lista de los géneros en formato JSON separados por saltos
de linea, cada genero con un array que contenga los títulos de los libros que pertenecen
al mismo. el ejemplo anterior daría como resultado:

    {"name":"cyberpunk","books":["Neuromancer","Snow Crash"]}
    {"name":"space opera","books":["A Deepness in the SKy","Void"]}

Tu stream deberá tomar esta lista de objetos JSON y comprimirla 
con el comando `zlib.createGzip()`.

* PISTAS *

El modulo `stream-combiner` crea un flujo de datos mediante una lista de streams,
devolviendo un único stream que contiene el primer stream suministrado como el de escritura
y el ultimo como el de lectura, del mismo modo que el modulo `duplexer` pero con un numero
de streams arbitrario en el medio. A diferencia del modulo `duplexer`, cada stream
es transmitido al siguiente mediante un pipe. Por ejemplo:

    var combine = require('stream-combiner');
    var stream = combine(a, b, c, d);
    
internamente hará `a.pipe(b).pipe(c).pipe(d)`, pero el `stream` devuelto por
`combine()` tiene su lado de escritura enganchado a `a` y su lado de lectura a `d`.

Como en el desafío LINES, el modulo `split` sera de mucha ayuda. Puedes enviar
un stream devuelto por  `split` directamente a `stream-combiner`.

Si decides utilizar `split` junto con `stream-combiner`, asegurate de instalarlos
dentro del directorio donde se encuentra tu archivo de solución mediante:

    npm install stream-combiner split
