Debemos hacer un programa que convierta datos desde `process.stdin` y los canalize a `process.stdout`, 
devolviendo todos los datos en mayuscula (UPPERCASE), usando el modulo `through`.

`through(write, end)` retorna un objeto `readable/writable Stream`

Cuando tu llamas `src.pipe(dst)`, sobre algun Objeto Stream `dst` creado apartir de `through()`,
el metodo `write(buf)` va a ser llamado cuando los datos de `src` estan disponibles.
Cuando `src` finalize de enviar los datos , la funcion `end()`. 

Dentro de los callbacks de `write` y `end`, `this` es fijado al Stream retornado 
por `through()`,por ende puedes llamar a `this.queue()` dentro de los callbacks para transformar los datos.

//TODO: When you specify a falsy value for the `write` argument, this function is used
// to pass input data directly through to the output unmodified:

Cuando tu especificas una falsedad en tu argumento del callback `write`, se utiliza esta función
para pasar los datos de entrada directamente a través de la salida sin modificar.

     function write (buf) { this.queue(buf) }

`this.queue(null)` nos dice que del de stream que estamos consumiendo no se debe esperar mas datos.
El default de la funcion `end` es:

     function end () { this.queue(null) }
 
Por ejemplo, aqui tenemos un programa que dispara los callbacks `write(buf)` y `end()`, 
llamando `.write()` y `.end()` manualmente:

    var through = require('through');
    var tr = through(write, end);
    tr.write('beep\n');
    tr.write('boop\n');
    tr.end();
    
    function write (buf) { console.dir(buf) }
    function end () { console.log('__END__') }

En lugar de llamar `console.dir(buf)`, tu codigo deberua usar `this.queue()` en 
tu funcion `write()`, para darle salida a los datos llevados a mayusculas.

No olvides de darle la entrada de datos a tu Stream desde stdin y su salida a
stdout.
Deberia verse algo parecido a esto: 

    process.stdin.pipe(tr).pipe(process.stdout);

Ten en cuenta que los datos que obtendras de `process.stdin` son Budders, y no Strings. 
Puedes llamar a `buf.toString()` en el objeto Buffer para obtener un string, y sobre el, 
hacer `.toUpperCase()`, para volverlo totalmente en mayusculas.

Asegurate de ejecutar `npm install through`, para instalar el modulo through en el directorio 
donde tus soluciones existen.

