To complete this exercise, you must first install the "through" module.  In the directory with your solution file, type:
`npm install through` 

In this exercise you will use the "through" module to convert data from from `process.stdin` to upper-case data on `process.stdout`.through() returns a readable/writable stream. You can pass in the optional write and end functions to allow for buffering on pauses in data: through(write, end) 

Inside the `write` and `end` callbacks, `this` is set to the through stream
returned by `through()` so you can just call `this.queue()` inside the callbacks
to transform data. 

When you specify a falsy value for the `write` argument, this function is used
to pass input data directly through to the output unmodified.

The `this.queue(null)` tells the consuming stream to not expect any more data. The default write and end functions are below:

var through = require('through')
 
through(function write(data) {
    this.queue(data) //data *must* not be null 
  },
  function end () { //optional 
    this.queue(null)
  })

For example, here is a program that fires the `write(buf)` and `end()` callbacks
by calling `.write()` and `.end()` manually:

    var through = require('through');
    var tr = through(write, end);
    tr.write('beep\n');
    tr.write('boop\n');
    tr.end();
    
    function write (buf) { console.dir(buf) }
    function end () { console.log('__END__') }

Instead of calling `console.dir(buf)`, your code should use `this.queue()` in
your `write()` function to output upper-cased data.

When you call `src.pipe(dst)` on some stream `dst` created with `through()`, the
`write(buf)` function will be called when data from `src` is available.
When `src` is done sending data, the `end()` function is called.

You'll need to use process.stdin and process.stdout to reference your incoming data and your output, as in this line here:

    process.stdin.pipe(tr).pipe(process.stdout);

Note that the chunks you will get from `process.stdin` are Buffers, not strings.
You can call `buf.toString()` on a Buffer to get a string and strings can do
`.toUpperCase()`.

